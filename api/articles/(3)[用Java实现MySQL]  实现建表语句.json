{"title":"(3) [用Java实现MySQL] 实现建表语句","uid":"9b2e5852df7ea6225604d1ed9bf3d9a9","slug":"(3)[用Java实现MySQL]  实现建表语句","date":"2022-12-14T03:41:10.000Z","updated":"2022-12-20T02:50:23.472Z","comments":true,"path":"api/articles/(3)[用Java实现MySQL]  实现建表语句.json","keywords":null,"cover":null,"content":"<h3 id=\"建表语句分析\"><a href=\"#建表语句分析\" class=\"headerlink\" title=\"建表语句分析\"></a>建表语句分析</h3><p>一个完整的建表语句如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">create table tablename(\n\tfield_name coltype comment &#39;列注释&#39;,\n  ...\n  \n)comment &#x3D; &#39;表注释&#39;,engine&#x3D;&#39;存储引擎&#39; , charset &#x3D; &#39;utf-8&#39;</code></pre>\n<p>这里需要注意几个点</p>\n<ol>\n<li>表编码，我们不实现 默认都使用utf-8</li>\n<li>存储引擎实现，MySQL默认是InnoDB，但是我们自己实现，还没有所谓的InnoDB</li>\n<li>一些特殊功能，如<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>primary key ，auto_increment ,not null default unique key 等</p></blockquote>\n</li>\n</ol>\n<p>建表的时候只需要把表信息存储起来。 其他的功能是由存储引擎具体实现的。<br>本文根据之前的流程搭建。只需要扩展一些建表分析语句就可以</p>\n<h3 id=\"列类型\"><a href=\"#列类型\" class=\"headerlink\" title=\"列类型\"></a>列类型</h3><p>MySQL数据类型大概总结为3种</p>\n<ol>\n<li>数字</li>\n<li>日期</li>\n<li>字符串</li>\n</ol>\n<p>其中数字有 tinyint smallint等等<br>我们只实现int<br>日期只实现时间戳<br>字符串实现动态字符串</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 列类型\n *\n * @author gxz gongxuanzhang@foxmail.com\n **&#x2F;\npublic enum ColumnType &#123;\n\n    &#x2F;**\n     * 数字\n     **&#x2F;\n    INT,\n    &#x2F;**\n     * 字符串\n     **&#x2F;\n    STRING,\n    &#x2F;**\n     * 时间戳\n     **&#x2F;\n    TIMESTAMP;\n&#125;</code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 列信息\n *\n * @author gxz gongxuanzhang@foxmail.com\n **&#x2F;\n@Data\npublic class ColumnInfo implements ExecuteInfo &#123;\n\n    private ColumnType type;\n    private String name;\n    private String comment;\n    private boolean autoIncrement;\n    private boolean notNull;\n    private boolean unique;\n    private String defaultValue;\n\n&#125;</code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 表信息\n *\n * @author gxz gongxuanzhang@foxmail.com\n **&#x2F;\n@Data\npublic class TableInfo implements ExecuteInfo &#123;\n\n    private String database;\n    private String tableName;\n    private List&lt;ColumnInfo&gt; columnInfos;\n    private List&lt;String&gt; primaryKey;\n    private String comment;\n    private String engine;\n\n\n&#125;</code></pre>\n<p>解析内容的类是 TableCreator\u0000可以直接用代码查看</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>主键是属于表信息的，不是列信息的。主键可以是联合主键 这是需要注意的细节</p></blockquote>\n<p>一条sql解析成一个表信息之后。 要思考接下来的问题</p>\n<ol>\n<li>如何存储?</li>\n<li>存在哪里</li>\n</ol>\n<p>表属于数据库<br>上节已经聊到数据库其实就是一个文件夹<br>那只需要在文件夹中落地表结构即可，把表结构封装成一个文件。<br>MySQL中 .frm文件就是表结构文件<br>我模拟实现一个 .gfrm文件</p>\n<p>frm完全还原的话是非常非常复杂的，这里先设计初版 gfrm文件<br>需要存储的内容如<strong>TableInfo</strong>实体所示，我们直接用Java序列化的方式存储<br>当 desc tableName的时候  反序列化回来就可以</p>\n<p>如何确定表要建在哪个数据库下<br>第一是直接在sql中  database.table<br>第二是当前会话 use database；<br>这个信息是直接存储在Session中的。<br>我们直接将RequestId关联到MySQL session 即可<br>下篇文章实现Session 状态的维护</p>\n","feature":true,"text":"建表语句分析一个完整的建表语句如下 create table tablename( field_name coltype comment &#39;列注释&#39;, ... )comment &#x3D; &#39;表注释&#39;,engine&#x3D;&#39;存储引擎&...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"系列文章","slug":"系列文章","count":4,"path":"api/categories/系列文章.json"}],"tags":[{"name":"手写mysql","slug":"手写mysql","count":4,"path":"api/tags/手写mysql.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5%E5%88%86%E6%9E%90\"><span class=\"toc-text\">建表语句分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">列类型</span></a></li></ol>","author":{"name":"龚宣璋","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"JAVA和DOTA都会点","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"(4) [用Java实现MySQL] 会话状态与全局变量","uid":"d95e2b922f884f44e805a9b36c24650c","slug":"(4)[用Java实现MySQL]  会话状态与全局变量","date":"2022-12-18T02:41:10.000Z","updated":"2022-12-20T02:55:07.961Z","comments":true,"path":"api/articles/(4)[用Java实现MySQL]  会话状态与全局变量.json","keywords":null,"cover":[],"text":"全局变量的维护初创项目的时候，我利用Spring的Environment接口实现了全局维护和默认配置的基本模型。 本章根据Request的特性封装成我们自己的MySqlSession用SessionId 模拟真正开启的session窗口要保证session数据和局部变量的隔离性S...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"系列文章","slug":"系列文章","count":4,"path":"api/categories/系列文章.json"}],"tags":[{"name":"手写mysql","slug":"手写mysql","count":4,"path":"api/tags/手写mysql.json"}],"author":{"name":"龚宣璋","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"JAVA和DOTA都会点","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"(2)[用Java实现MySQL] create database","uid":"a91aef9730d2bd286cbd2976d1254892","slug":"(2)[用Java实现MySQL] create database","date":"2022-12-13T03:41:10.000Z","updated":"2022-12-14T09:33:30.156Z","comments":true,"path":"api/articles/(2)[用Java实现MySQL] create database.json","keywords":null,"cover":[],"text":"从创建一个数据库开始表是属于数据库的，我们对数据的操作也是都是基于某个数据库。所以要有一个 创建数据库的功能，基于这个最简单的功能把整个流程搭建起来首先写两个接口，一个解析器 一个执行器 &#x2F;** * 执行器，一般是解析Sql得到的 * * @author gxz gon...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"系列文章","slug":"系列文章","count":4,"path":"api/categories/系列文章.json"}],"tags":[{"name":"手写mysql","slug":"手写mysql","count":4,"path":"api/tags/手写mysql.json"}],"author":{"name":"龚宣璋","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"JAVA和DOTA都会点","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}