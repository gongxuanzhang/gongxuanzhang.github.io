{"title":"(2)[用Java实现MySQL] create database","uid":"a91aef9730d2bd286cbd2976d1254892","slug":"(2)[用Java实现MySQL] create database","date":"2022-12-13T03:41:10.000Z","updated":"2022-12-14T09:33:30.156Z","comments":true,"path":"api/articles/(2)[用Java实现MySQL] create database.json","keywords":null,"cover":[],"content":"<h2 id=\"从创建一个数据库开始\"><a href=\"#从创建一个数据库开始\" class=\"headerlink\" title=\"从创建一个数据库开始\"></a>从创建一个数据库开始</h2><p>表是属于数据库的，我们对数据的操作也是都是基于某个数据库。<br>所以要有一个 创建数据库的功能，基于这个最简单的功能把整个流程搭建起来<br>首先写两个接口，一个解析器  一个执行器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 执行器，一般是解析Sql得到的\n *\n * @author gxz gongxuanzhang@foxmail.com\n * @see org.gongxuanzhang.mysql.service.parser.SqlParser\n **&#x2F;\npublic interface Executor &#123;\n\n    &#x2F;**\n     * 执行\n     *\n     * @return 返回执行结果\n     **&#x2F;\n    Result doExecute() ;\n&#125;</code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Sql 语法分析器\n *\n * @author gxz gongxuanzhang@foxmail.com\n **&#x2F;\npublic interface SqlParser &#123;\n\n    &#x2F;**\n     * 解析sql成可执行对象\n     *\n     * @param sql 被解析的sql\n     * @return 返回可执行内容 或者直接报错\n     * @throws SqlParseException 解析过程中出现问题\n     **&#x2F;\n    Executor parse(String sql) throws SqlParseException;\n\n&#125;\n</code></pre>\n<p>这两个接口作为我们整个流程的总接口使用</p>\n<p>流程简化用一张图表示</p>\n<img src=\"/images/mysql/flow.png\" alt=\"framework\"  />\n\n\n<p>剩下的就是开始编码。</p>\n<p>有一个小细节</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> 如果用户没有提供 dataDir 数据根目录，那我们需要给一个默认目录同时创建文件夹<br> 我在Spring声明周期中加了一个初始化根目录的类 </p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 如果没配置data dir 给默认值\n * 同时创建文件夹\n *\n * @author gxz gongxuanzhang@foxmail.com\n **&#x2F;\n@Slf4j\npublic class MySQLInit implements EnvironmentPostProcessor &#123;\n\n\n    @Override\n    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) &#123;\n        String dataDir &#x3D; environment.getProperty(PropertiesConstant.DATA_DIR);\n        if (dataDir &#x3D;&#x3D; null) &#123;\n            File db &#x3D; new File(&quot;db&quot;);\n            dataDir &#x3D; db.getAbsolutePath();\n            MutablePropertySources propertySources &#x3D; environment.getPropertySources();\n            Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;(4);\n            map.put(PropertiesConstant.DATA_DIR, dataDir);\n            propertySources.addLast(new MapPropertySource(&quot;mysql&quot;, map));\n        &#125;\n        File db &#x3D; new File(dataDir);\n        if (!db.exists()) &#123;\n            db.mkdirs();\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>今天搭建了初版代码，大概900多行   整体流程已经搭建好了<br>持续更新吧<br>github: <a href=\"https://github.com/gongxuanzhang/java-mysql\">https://github.com/gongxuanzhang/java-mysql</a></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h2>","feature":true,"text":"从创建一个数据库开始表是属于数据库的，我们对数据的操作也是都是基于某个数据库。所以要有一个 创建数据库的功能，基于这个最简单的功能把整个流程搭建起来首先写两个接口，一个解析器 一个执行器 &#x2F;** * 执行器，一般是解析Sql得到的 * * @author gxz gon...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"系列文章","slug":"系列文章","count":4,"path":"api/categories/系列文章.json"}],"tags":[{"name":"手写mysql","slug":"手写mysql","count":4,"path":"api/tags/手写mysql.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%A7%8B\"><span class=\"toc-text\">从创建一个数据库开始</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-1\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-2\"><span class=\"toc-text\"></span></a></li></ol>","author":{"name":"龚宣璋","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"JAVA和DOTA都会点","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"(3) [用Java实现MySQL] 实现建表语句","uid":"9b2e5852df7ea6225604d1ed9bf3d9a9","slug":"(3)[用Java实现MySQL]  实现建表语句","date":"2022-12-14T03:41:10.000Z","updated":"2022-12-20T02:50:23.472Z","comments":true,"path":"api/articles/(3)[用Java实现MySQL]  实现建表语句.json","keywords":null,"cover":null,"text":"建表语句分析一个完整的建表语句如下 create table tablename( field_name coltype comment &#39;列注释&#39;, ... )comment &#x3D; &#39;表注释&#39;,engine&#x3D;&#39;存储引擎&...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"系列文章","slug":"系列文章","count":4,"path":"api/categories/系列文章.json"}],"tags":[{"name":"手写mysql","slug":"手写mysql","count":4,"path":"api/tags/手写mysql.json"}],"author":{"name":"龚宣璋","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"JAVA和DOTA都会点","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"(1) [用Java实现MySQL] 初创项目","uid":"0d67963b6ea7838663d47b87401f96f0","slug":"(1) [用Java实现MySQL] 初创项目","date":"2022-12-12T03:41:10.000Z","updated":"2022-12-14T09:33:30.151Z","comments":true,"path":"api/articles/(1) [用Java实现MySQL] 初创项目.json","keywords":null,"cover":[],"text":"整体架构整体架构是根据MySQL的架构实现，既然要实现MySQL那就尽可能的还原，虽然不能百分百做到，还是尽自己所能 经典的MySQL架构图 MySQL架构主要分为三个部分 连接层，服务层，存储层其中学习的主要部分在存储层。但是我是为了实现，所以要考虑所有内容 初版思路连接层 连...","link":"","photos":[],"count_time":{"symbolsCount":778,"symbolsTime":"1 mins."},"categories":[{"name":"系列文章","slug":"系列文章","count":4,"path":"api/categories/系列文章.json"}],"tags":[{"name":"手写mysql","slug":"手写mysql","count":4,"path":"api/tags/手写mysql.json"}],"author":{"name":"龚宣璋","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"JAVA和DOTA都会点","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}