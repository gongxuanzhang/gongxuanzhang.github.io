{"title":"Logback和SpringCloud配置中心取值UNDEFINED问题","uid":"bb505a75d0ca128654929c76eb9bc898","slug":"LogbackandSpring","date":"2022-11-09T03:41:10.000Z","updated":"2022-12-01T08:40:53.497Z","comments":true,"path":"api/articles/LogbackandSpring.json","keywords":null,"cover":[],"content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>在使用Logback时，如果需要动态输出路径，可以在<strong>logback-spring.xml</strong>中配置和spirng相关内容<br>举个伪代码例子</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;springProperty scope&#x3D;&quot;context&quot; name&#x3D;&quot;outFilePath&quot; source&#x3D;&quot;filePath&quot;&#x2F;&gt;\n&lt;appender name&#x3D;&quot;info&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n  &lt;FileNamePattern&gt;$&#123;OPEN_FILE_PATH&#125;&#x2F;info&#x2F;%d&#123;yyyy-MM-dd&#125;&#x2F;$&#123;applicationName&#125;-%i.log&lt;&#x2F;FileNamePattern&gt;\n&lt;&#x2F;appender&gt;\n</code></pre>\n<p>例子中的输入路径是动态配置的。<br>可以直接在application.yml中进行配置。<br>但如果我们是Spring Cloud环境中,而且filePath配置在配置中心中，Spring cloud会加载两次容器，第一次是bootStrap容器，用来加载配置中心的配置，第二次是真正我们的Spring Bean容器<br>所以当文件路径在配置中心时，会出现 “filePath_IS_UNDEFINED”的文件夹。</p>\n<h2 id=\"解决目标\"><a href=\"#解决目标\" class=\"headerlink\" title=\"解决目标\"></a>解决目标</h2><ol>\n<li>让日志不出现XXX_IS_UNDEFINED文件夹</li>\n<li>如果配置中心中没有配置，给默认路径让日志正常打印</li>\n</ol>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><p>Spring Cloud 会在prepareEnvironment时加载一个bootstrap的容器 此容器负责初始化 bootstrap的配置 并且没有Banner，所以在平时我们是感知不到有另一个容器的,此文中不聊相关问题，只讨论如何解决<br>最后输出日志和创建文件是由各个Appender完成的</p>\n<img src=\"/images/疑难杂症/logbackandspring/flowchart.png\" alt=\"flowchart.png\"/>\n\n<p>下面看一下源码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void openFile(String file_name) throws IOException &#123;\n    lock.lock();\n    try &#123;\n        File file &#x3D; new File(file_name);\n        boolean result &#x3D; FileUtil.createMissingParentDirectories(file);\n        if (!result) &#123;\n            addError(&quot;Failed to create parent directories for [&quot; + file.getAbsolutePath() + &quot;]&quot;);\n        &#125;\n\n        ResilientFileOutputStream resilientFos &#x3D; new ResilientFileOutputStream(file, append, bufferSize.getSize());\n        resilientFos.setContext(context);\n        setOutputStream(resilientFos);\n    &#125; finally &#123;\n        lock.unlock();\n    &#125;\n&#125;</code></pre>\n<p>不错，创建文件夹的方法是<strong>public</strong>的,那说明可以继承之后重写<br>第二步，在读完配置之后如果读不到目标配置，则给一个默认配置</p>\n<img src=\"/images/疑难杂症/logbackandspring/debug.png\" alt=\"debug.png\"/>\n\n<p>Spring 容器的声明周期是用几个有序监听器加载的<br>其中第一个就是Bootstrap监听器<br>第5个就是 加载Log组件的监听器<br>这里我们注意第三个  EnvironmentPostProcessorApplicationListener<br>从名字就可以看出是环境加载之后可以做的事情<br>深入看一下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private void onApplicationEnvironmentPreparedEvent(ApplicationEnvironmentPreparedEvent event) &#123;\n\t\tConfigurableEnvironment environment &#x3D; event.getEnvironment();\n\t\tSpringApplication application &#x3D; event.getSpringApplication();\n\t\tfor (EnvironmentPostProcessor postProcessor : getEnvironmentPostProcessors(event.getBootstrapContext())) &#123;\n\t\t\tpostProcessor.postProcessEnvironment(environment, application);\n\t\t&#125;\n\t&#125;</code></pre>\n<p>所以这里有两种方法解决</p>\n<ol>\n<li>在EnvironmentPostProcessorApplicationListener 中加入一个 EnvironmentPostProcessor判断</li>\n<li>在监听器列表中  在1-5中插入一个监听器，判断环境内容之后插入默认值即可此文采用这种方法</li>\n</ol>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ol>\n<li><p>继承RollingFileAppender 重写openFile 方法，此处注意需要置一个空输出流，否则控制台可能要消失，如果是Java11以后的版本 可以直接使用 OutputStream\u0000.nullOutputStream\u0000()方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MyFileAppender&lt;E&gt; extends RollingFileAppender&lt;E&gt; &#123;\n\n    private static final String UNDEFINED &#x3D; &quot;IS_UNDEFINED&quot;;\n\n    @Override\n    public void openFile(String fileName) throws IOException &#123;\n        if (fileName.contains(UNDEFINED)) &#123;\n            this.setOutputStream(new NullOutputStream());\n            return;\n        &#125;\n        super.openFile(fileName);\n    &#125;\n\n    public static class NullOutputStream extends OutputStream&#123;\n        private volatile boolean closed;\n\n        private void ensureOpen() throws IOException &#123;\n            if (closed) &#123;\n                throw new IOException(&quot;Stream closed&quot;);\n            &#125;\n        &#125;\n\n        @Override\n        public void write(int b) throws IOException &#123;\n            ensureOpen();\n        &#125;\n\n        @Override\n        public void write(byte[] b, int off, int len) throws IOException &#123;\n            ensureOpen();\n        &#125;\n\n        @Override\n        public void close() &#123;\n            closed &#x3D; true;\n        &#125;\n    &#125;\n\n&#125;</code></pre>\n</li>\n<li><p>加入logback配置文件，下面是伪配置文件例子</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;appender name&#x3D;&quot;info&quot; class&#x3D;&quot;org.gongxuanzhang.MyFileAppender&quot;&gt;</code></pre>\n</li>\n<li><p>加入目标位置监听器,这里注意三件事，1.如果是bootstrap的环境，需要判断跳过。2. 通过Spring Boot SPI机制加入spring 配置 3. 加入的监听器在spring中的位置</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MyFilePath implements ApplicationListener&lt;ApplicationEnvironmentPreparedEvent&gt;,\n        Ordered &#123;\n\n\n    @Override\n    public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) &#123;\n        ConfigurableEnvironment environment &#x3D; event.getEnvironment();\n        if (environment.getPropertySources().contains(&quot;bootstrap&quot;)) &#123;\n            &#x2F;&#x2F; 此时是bootstrap\n            return;\n        &#125;\n        String pathFile &#x3D; environment.getProperty(&quot;pathFile&quot;);\n        if(pathFile &#x3D;&#x3D; null)&#123;\n            pathFile &#x3D; &quot;defaultPathFile&quot;;\n\n        &#125;\n        Map&lt;String,Object&gt; myConfig &#x3D; new HashMap&lt;&gt;();\n        myConfig.put(&quot;path-file&quot;,pathFile);\n        MutablePropertySources propertySources &#x3D; environment.getPropertySources();\n        propertySources.addFirst(new MapPropertySource(&quot;myConfig&quot;,myConfig));\n    &#125;\n\n    @Override\n    public int getOrder() &#123;\n        return Ordered.HIGHEST_PRECEDENCE + 11;\n    &#125;\n\n\n&#125;\n</code></pre>\n<p>在 resources中META-INF文件夹中创建 spring.factories 加入类</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">org.springframework.context.ApplicationListener &#x3D; org.gongxuanzhang.MyFilePath</code></pre></li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>完美收工</p></blockquote>\n","text":"问题描述在使用Logback时，如果需要动态输出路径，可以在logback-spring.xml中配置和spirng相关内容举个伪代码例子 &lt;springProperty scope&#x3D;&quot;context&quot; name&#x3D;&quot;outF...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"开发相关","slug":"开发相关","count":4,"path":"api/categories/开发相关.json"}],"tags":[{"name":"疑难杂症","slug":"疑难杂症","count":1,"path":"api/tags/疑难杂症.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">问题描述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">解决目标</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90\"><span class=\"toc-text\">原理分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">解决方法</span></a></li></ol>","author":{"name":"龚宣璋","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"JAVA和DOTA都会点","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"hexo Aurora 删除评论侧边栏","uid":"2b723abdda595c7271b214bbf961de56","slug":"aurora删除评论侧边栏","date":"2022-11-09T03:41:10.000Z","updated":"2022-11-09T03:37:23.344Z","comments":true,"path":"api/articles/aurora删除评论侧边栏.json","keywords":null,"cover":[],"text":"hexo Aurora 去掉评论区问题：评论侧边栏今天刚搭建了博客，用了hexo Aurora主题 整体主题挺满意的，但是有两个地方非常难受。 在配置文件中设置了不启用之后变成了这样 仅仅是不请求接口了，但是侧边栏仍然存在，看了文档和github，好多人都有这个问题。下面来解决这...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"开发相关","slug":"开发相关","count":4,"path":"api/categories/开发相关.json"}],"tags":[{"name":"一些黑科技","slug":"一些黑科技","count":1,"path":"api/tags/一些黑科技.json"}],"author":{"name":"龚宣璋","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"JAVA和DOTA都会点","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}